package Java14a;

import java.util.Scanner;

public class T2 {//不能用动态规划！沃日
    public static void main(String[] args) {
        Scanner scan=new Scanner(System.in);
        int[][][] dp =new int[2][5][5];//dp[k][i][j] 代表第i行j列，状态为k时的路径数， k为0/1对应信号状态
        dp[1][0][0]=1;//0行0列信号为1的路径为1
        dp[0][0][1]=1;//0行1列信号为0的路径为1
        dp[1][0][2]=1;//0行2列信号为1的路径为1
        dp[0][0][3]=1;//0行3列信号为0的路径为1
        dp[1][0][4]=1;//0行4列信号为1的路径为1
        for (int i=1,j=4;i<=4&&j>=1;i++,j--){
            for (int k=0;k<j;k++){
                //从第二行开始，信号为1 的由 上行以下 三种情况转换而来 1 1 / 1 0 / 0 1 再根据三种运算结果决定是否乘2或乘3
                //1 | 1 =1  1 & 1=1 所以dp[1][i-1][k]*dp[1][i-1][k+1] 要 *2
                dp[1][i][k]=dp[1][i-1][k]*dp[1][i-1][k+1]*2+dp[1][i-1][k]*dp[0][i-1][k+1]*2+
                        dp[0][i-1][k]*dp[1][i-1][k+1]*2;
                //从第二行开始，信号为0 的由 上行以下 四种情况转换而来 0 0 / 1 0 / 0 1 /1 1再根据三种运算结果决定是否乘2或乘3
                //0 | 0 =0  0 & 0=0 0^0=0 所以dp[0][i-1][k]*dp[0][i-1][k+1] 要 *3
                dp[0][i][k]=dp[0][i-1][k]*dp[0][i-1][k+1]*3+dp[1][i-1][k]*dp[0][i-1][k+1]+
                        dp[0][i-1][k]*dp[1][i-1][k+1]+dp[1][i-1][k]*dp[1][i-1][k+1];
            }
        }
        System.out.println(dp[1][4][0]);

        scan.close();
    }
}
